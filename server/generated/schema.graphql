### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Crate {
  id: Int!
  rotation: Float!
  Scene: Scene
  x: Float!
  y: Float!
}

input CrateWhereUniqueInput {
  id: Int
}

type Enemy {
  rotation: Float!
  Scene: Scene
  x: Float!
  y: Float!
}

input EnemyWhereUniqueInput {
  id: Int
}

type ExplosiveCrate {
  chainReactionRadius: Float!
  explosionForce: Float!
  explosionRadius: Float!
  hitSensitivity: Float!
  id: Int!
  onlyPlayerCanTrigger: Boolean!
  rotation: Float!
  Scene: Scene
  x: Float!
  y: Float!
}

input ExplosiveCrateWhereUniqueInput {
  id: Int
}

type Platform {
  bounceMultiplier: Float!
  degsPerSec: Float!
  onlyBounceFront: Boolean!
  rotation: Float!
  Scene: Scene
  useBouncer: Boolean!
  useRotator: Boolean!
  x: Float!
  y: Float!
}

input PlatformWhereUniqueInput {
  id: Int
}

type Query {
  scene(where: SceneWhereUniqueInput!): Scene
  scenes(after: SceneWhereUniqueInput, before: SceneWhereUniqueInput, first: Int, last: Int): [Scene!]!
}

type Scene {
  crates(after: CrateWhereUniqueInput, before: CrateWhereUniqueInput, first: Int, last: Int): [Crate!]!
  enemies(after: EnemyWhereUniqueInput, before: EnemyWhereUniqueInput, first: Int, last: Int): [Enemy!]!
  explosiveCrates(after: ExplosiveCrateWhereUniqueInput, before: ExplosiveCrateWhereUniqueInput, first: Int, last: Int): [ExplosiveCrate!]!
  id: Int!
  levelNumber: Int!
  platforms(after: PlatformWhereUniqueInput, before: PlatformWhereUniqueInput, first: Int, last: Int): [Platform!]!
}

input SceneWhereUniqueInput {
  id: Int
}
